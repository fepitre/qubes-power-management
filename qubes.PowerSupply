#!/usr/bin/env python3

import os
import sys
import json
import pyudev
import time

from multiprocessing import Process

SYS_CLASS_POWER_SUPPLY = '/sys/class/power_supply'


def uevent_to_psp(psu_name):
    psp = {}
    uevent = SYS_CLASS_POWER_SUPPLY + '/%s/uevent' % psu_name
    if os.path.exists(uevent):
        with open(uevent, 'r') as fd:
            result = fd.read().split('\n')
        for item in result:
            parsed = item.split('=')
            if len(parsed) == 2 and item.startswith('POWER_SUPPLY_'):
                psp_name = parsed[0].replace('POWER_SUPPLY_', '').lower()
                psp.update({
                    psp_name: parsed[1]
                })
    return psp


def udev_to_psp(udev):
    psp = {}
    for item in udev.items():
        key, val = item
        if key.startswith('POWER_SUPPLY_'):
            psp_name = key.replace('POWER_SUPPLY_', '').lower()
            psp.update({
                psp_name: val
            })
    return psp


def monitor_udev():
    context = pyudev.Context()
    monitor = pyudev.Monitor.from_netlink(context)
    monitor.filter_by(subsystem='power_supply')

    for device in iter(monitor.poll, None):
        if device.action == 'change':
            print(json.dumps(udev_to_psp(device)))
            sys.stdout.flush()


def monitor():
    while True:
        for device in os.listdir(SYS_CLASS_POWER_SUPPLY):
            print(json.dumps(uevent_to_psp(device)))
            sys.stdout.flush()
        time.sleep(60)


if __name__ == '__main__':
    p1 = Process(target=monitor())
    p1.start()
    p2 = Process(target=monitor_udev())
    p2.start()
