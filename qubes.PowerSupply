#!/usr/bin/env python3

import os
import sys
import json
import pyudev
import time

from multiprocessing import Process

SYS_CLASS_POWER_SUPPLY = '/sys/class/power_supply'

PSU_PROPS = [
    "NAME",
    "STATUS",
    "CHARGE_TYPE",
    "HEALTH",
    "PRESENT",
    "ONLINE",
    "TECHNOLOGY",
    "CYCLE_COUNT",
    "VOLTAGE_MAX",
    "VOLTAGE_MIN",
    "VOLTAGE_MAX_DESIGN",
    "VOLTAGE_MIN_DESIGN",
    "VOLTAGE_NOW",
    "POWER_NOW",
    "ENERGY_FULL_DESIGN",
    "ENERGY_EMPTY_DESIGN",
    "ENERGY_FULL",
    "ENERGY_NOW",
    "CAPACITY",
    "CAPACITY_LEVEL",
    "TEMP",
    "MODEL_NAME",
    "MANUFACTURER",
    "SERIAL_NUMBER"
]

def get_sysfs(psu_name, item):
    fp = SYS_CLASS_POWER_SUPPLY + '/%s/%s' % (psu_name, item)
    result = None
    if os.path.exists(fp):
        with open(fp, 'r') as fd:
            result = fd.read().rstrip('\n').split('\n')
    
    return result

def uevent_to_psp(psu_name):
    psp = {}
    uevent = get_sysfs(psu_name, 'uevent')
    ptype = get_sysfs(psu_name, 'type')
    if uevent and ptype:
        psp['TYPE'] = 'POWER_SUPPLY_TYPE_' + ptype[0].upper()
        for item in uevent:
            parsed = item.split('=')
            if len(parsed) == 2:
                psp_name = parsed[0].upper().replace('POWER_SUPPLY_', '')
                if psp_name in PSU_PROPS:
                    if psp_name != "NAME":
                        psp_name = 'POWER_SUPPLY_PROP_' + psp_name
                    psp.update({
                        psp_name: parsed[1]
                    })
    return psp


def udev_to_psp(udev):
    psp = {}
    ptype = None
    for item in udev.items():
        key, val = item
        if key.startswith('POWER_SUPPLY_'):
            psp_name = key.upper().replace('POWER_SUPPLY_', '')
            if psp_name in PSU_PROPS:
                if psp_name != "NAME":
                    psp_name = 'POWER_SUPPLY_PROP_' + psp_name
                else:
                    ptype = get_sysfs(val, 'type')
                if ptype:
                    psp['TYPE'] = 'POWER_SUPPLY_TYPE_' + ptype[0].upper()
                psp.update({
                    psp_name: val
                })
    return psp

def monitor():
    while True:
        # sysfs
        for device in os.listdir(SYS_CLASS_POWER_SUPPLY):
            print(json.dumps(uevent_to_psp(device)), flush=True)
        
        # udev
        context = pyudev.Context()
        monitor = pyudev.Monitor.from_netlink(context)
        monitor.filter_by(subsystem='power_supply')
        device = monitor.poll(10)
        if device and device.action == 'change':
            print(json.dumps(udev_to_psp(device)), flush=True)


if __name__ == '__main__':
    monitor()
